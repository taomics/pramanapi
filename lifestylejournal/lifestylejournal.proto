syntax = "proto3";

package taomics.praman.lifestylejournal;

option go_package = "github.com/taomics/pramanapi/lifestylejournal";

import "praman.proto";
import "recordlog_type.proto";

/*
        一部英語の表現と日本語の表現が正確でないものがありますが、意図したものです。
        明らかに意味が異なる場合は誤りですので訂正してください。
*/

enum TrackerStatus {
  NO_TRACKER = 0;      // トラッカーを使っていない
  FITBIT_RAW = 1;      // Fitbit のデータを利用している
  FITBIT_MODIFIED = 2; // Fitbit のデータを一部変更して利用している
  APPLE_WATCH_RAW = 3; // Apple Watch のデータを利用している
  APPLE_WATCH_MODIFIED = 4; // Apple Watch のデータを一部変更して利用している
}

enum Sleepiness {
  SLEEPINESS_UNKNOWN = 0;
  NO_SLEEPINESS = 1;    // 眠気なし
  SLIGHTLY_SLEEPY = 2;  // 少し眠い
  QUITE_SLEEPY = 3;     // かなり眠い
  EXTREMELY_SLEEPY = 4; // 激しく眠い
}

// 菓子・飲料
enum ExtraEnergy {
  EXTRA_ENERGY_UNKNOWN = 0;
  NO_EXTRA_ENERGY = 1;         // 0
  AROUND_100_KILOCALORIES = 2; // 100
  AROUND_200_KILOCALORIES = 3; // 200
  AROUND_300_KILOCALORIES = 4; // 300
  OVER_400_KILOCALORIES = 5;   // 400以上
  AROUND_400_KILOCALORIES = 6; // 400
  OVER_600_KILOCALORIES = 7;   // 600以上
}

// 排便
message BristolStoolScale {
  enum Type {
    BRISTOL_STOOL_SCALE_UNKNOWN = 0;
    NO_STOOL = 1; // 便なし
    TYPE_1 = 2;   // コロコロ便
    TYPE_2 = 3;   // 硬い便
    TYPE_3 = 4;   // やや硬い便
    TYPE_4 = 5;   // 普通弁
    TYPE_5 = 6;   // やや柔ない便
    TYPE_6 = 7;   // 泥状便
    TYPE_7 = 8;   // 水様便
  }
}

message JournalSleep {
  enum FallAsleepDifficulty {
    FALL_ASLEEP_DIFFICULTY_UNKNOWN = 0;
    IMMEDIATE = 1;         // すぐ就寝
    WITHIN_30_MINUTES = 2; // 30分以内
    WITHIN_1_HOUR = 3;     // 1時間未満
    OVER_1_HOUR = 4;       // 1時間以上
  }

  enum SleepQuality {
    SLEEP_QUALITY_UNKNOWN = 0;
    RESTLESS = 1;              // 非常に疲れが取れなかった
    UNSETTLED = 2;             // 疲れが取れなかった
    SLEEP_QUALITY_NEUTRAL = 3; // どちらとも言えない
    RELAXED = 4;               // 疲れが取れた
    RESTFUL = 5;               // 非常に疲れが取れた
  }

  int64 bed_time = 1;                              // 就寝時間
  int64 wake_time = 2;                             // 起床時間
  FallAsleepDifficulty fall_asleep_difficulty = 3; // 入眠困難感
  uint32 frequent_awakenings = 4;                  // 中途覚醒
  SleepQuality sleep_quality = 5;                  // 睡眠休養感
}

message JournalMeal {
  enum Quantity {
    ZERO = 0;       // 0
    HALF = 1;       // 0.5
    ONE = 2;        // 1
    TWO = 3;        // 2
    OVER_THREE = 4; // 3 以上
  }

  Quantity starch = 1; // 主食
  Quantity main = 2;   // 主菜
  Quantity side = 3;   // 副菜
  bool dairy = 4;      // 乳製品
  bool fruit = 5;      // 果物
}

message JournalIndulgence {
  enum CaffeineQuantity {
    NO_CAFEINE = 0;
    ONE_CUP = 1;       // 1杯
    TWO_CUPS = 2;      // 2杯
    WITHIN_5_CUPS = 3; // 3-5杯
    OVER_5_CUPS = 4;   // 6杯以上
  }

  // 純アルコール（g） = 容量（ml） × アルコール度数（%） / 100 x アルコール比重
  // 0.8
  //
  // アルコール度数が15%の日本酒の1合（約180ml）の場合のアルコール量は 21.6 g
  enum AlcoholQuantity {
    NO_ALCOHOL = 0;
    WITHIN_1_GO = 1; // 1合未満
    WITHIN_2_GO = 2; // 1-2合
    WITHIN_3_GO = 3; // 2-3合
    OVER_3_GO = 4;   // 3合以上
  }

  enum TabaccoQuantity {
    NO_TABACCO = 0;
    UPTO_5 = 1;          // 5本未満
    AROUND_HALF_BOX = 2; // 半箱
    AROUND_ONE_BOX = 3;  // 1箱
    OVER_ONE_BOX = 4;    // それ以上
  }

  enum TabaccoType {
    TABACCO_TYPE_NONE = 0;
    CIGARETTES = 1; // 紙巻タバコ
    HEATED = 2; // 加熱式タバコ（アイコス、プルーム、グローなど）
    ELECTRONIC = 3;            // 電子タバコ（VAPEなど）
    CIGARETTES_HEATED = 4;     // 紙巻タバコと加熱式タバコを併用
    CIGARETTES_ELECTRONIC = 5; // 紙巻タバコと電子タバコを併用
    HEATED_ELECTRONIC = 6;     // 加熱式タバコと電子タバコを併用
    ALL = 7;                   // 紙巻・加熱式・電子タバコを併用
  }

  int64 last_eating_time = 1 [ deprecated = true ]; // 食事最終摂取時刻

  int64 last_caffeine_time = 2;           // カフェイン最終摂取時刻
  CaffeineQuantity caffeine_quantity = 3; // カフェイン摂取量
  AlcoholQuantity alcohol_quantity = 4;   // 飲酒量
  TabaccoQuantity tabacco_quantity = 5;   // 喫煙量
  TabaccoType tabacco_type = 6;           // 喫煙種類
}

message JournalActivity {
  enum WalkingTime {
    WALKING_TIME_UNKNOWN = 0;
    WITHIN_30_MINUTES = 1; // 30分未満
    WITHIN_1_HOUR = 2;     // 1時間未満
    WITHIN_2_HOURS = 3;    // 2時間未満
    OVER_2_HOURS = 4;      // 2時間以上
  }

  enum SittingTime {
    SITTING_TIME_UNKNOWN = 0;
    WITHIN_5_HOURS = 1; // 5時間以内
    WITHIN_7_HOURS = 2; // 5-7時間
    WITHIN_9_HOURS = 3; // 7-9時間
    OVER_9_HOURS = 4;   // 9時間以上
  }

  enum StrengthTraining {
    STRENGTH_TRAINING_UNKNOWN = 0;
    BODY_WEIGHT = 1; // 自重トレーニング
    MACHINE = 2;     // マシントレーニング
    RESISTANCE = 3;  // ウェイトトレーニング
    HOLISTIC = 4;    // ボディワーク
  }

  oneof walking_activity {
    uint32 steps = 1;             // 歩数
    WalkingTime walking_time = 5; // 歩行時間
  }

  oneof sitting_activity {
    SittingTime sitting_time = 2; // 座位時間
    uint32 sitting_minutes = 6;   // 座位時間（分）
  }

  uint32 activity_minutes = 3; // 有酸素運動(アクティブ)時間
  repeated StrengthTraining strength_trainings = 4; // 筋トレ
}

message JournalStress {
  enum Mood {
    MOOD_UNKNOWN = 0;
    VERY_NEGATIVE = 1; // すごくネガティブ
    NEGATIVE = 2;      // ネガティブ
    MOOD_NEUTRAL = 3;  // どちらでもない
    POSITIVE = 4;      // ポジティブ
    VERY_POSITIVE = 5; // すごくポジティブ
  }

  enum Emotion {
    EMOTION_UNKNOWN = 0;
    VERY_IRRITATED = 1;  // すごくイライラ
    IRRITATED = 2;       // イライラ
    EMOTION_NEUTRAL = 3; // どちらでもない
    CALM = 4;            // 穏やか
    VERY_CALM = 5;       // すごく穏やか
  }

  enum TalkTime {
    TALK_TIME_UNKNOWN = 0;
    NO_TALK_TIME = 1;      // なし
    WITHIN_30_MINUTES = 2; // 30分未満
    AROUND_1_HOUR = 3;     // 約1時間
    AROUND_2_HOURS = 4;    // 約2時間
    OVER_3_HOURS = 5;      // 3時間以上
  }

  Mood daytime_mood = 1;       // 日中の気分
  Emotion daytime_emotion = 2; // 日中のストレス
  bool stress_coping = 3;      // ストレスコーピング
  TalkTime talk_time = 4;      // 1日の会話時間
}

message JournalMain {
  // 食事
  JournalMeal breakfast = 1;    // 朝食の食事量
  JournalMeal lunch = 2;        // 昼食の食事量
  JournalMeal dinner = 3;       // 夕食の食事量
  JournalMeal snacks = 4;       // 間食量
  ExtraEnergy extra_energy = 5; // 菓子・飲料

  // 嗜好
  JournalIndulgence indulgence = 6;

  // 運動
  JournalActivity activity = 7;

  // 日中の眠気。取得するタイミングが異なるので JournalSleep に含めない。
  Sleepiness daytime_sleepiness = 8;

  // ストレス
  JournalStress stress = 9;

  // 食事-追加
  int64 last_eating_time = 10;                     // 食事最終摂取時刻
  BristolStoolScale.Type bristol_stool_scale = 11; // 排便
  string notes = 12;                               // 健康メモ
}

message JournalBodyMetrics {
  float weight = 1;   // 体重
  float body_fat = 2; // 体脂肪率
}

message LifestyleJournalKeepingRequest {
  taomics.praman.Date date = 1;
  TrackerStatus tracker_status = 2;

  // 睡眠。起床時の問診で記録します。
  JournalSleep sleep = 3;

  // 身体状況。起床時の問診で計測済みの場合のみ記録します。
  JournalBodyMetrics body_metrics = 5;

  // 睡眠と身体状況以外。就寝時の問診で記録します。
  JournalMain main = 4;
}

message LifestyleJournalKeepingResponse {}

/* EvaluateChallengeScores */

message ChallengeScore {
  taomics.praman.Date date = 1; // 評価した日付
  string name = 2;
  string url = 3; // 健康課題スコアのヘルプページのURL
  float score = 4;
  string score_prefix = 20; // スコアの前置き
  string score_suffix = 21; // スコアの後置き
  string score_text = 13;   // スコアテキスト
  Level level = 6;
  repeated LabelGroup label_groups = 7;
  Info info = 14;                                    // 情報テーブル
  BehaviorOnTap behavior_on_tap = 15;                // タップ時の挙動
  taomics.praman.recordlog.LogType related_log = 16; // 関連ログ

  float weekly_score = 18;  // 週間スコア
  float monthly_score = 19; // 月間スコア

  // スコアカードをレンダリングするための詳細情報
  // スコアカードは互いに排他的であり、1つのみセットされます。
  oneof scorecard {
    SimpleScorecard simple_scorecard = 8;
    BalanceScorecard balance_scorecard = 9;
    DifferentialScorecard differential_scorecard = 10;
    MealBalanceScorecard meal_balance_scorecard = 11;
  }

  repeated ChallengeScore sub_challenge_scores = 12; // サブスコア

  /* Deprecated */
  float score_change = 5 [ deprecated = true ]; // 前回の評価とのスコアの変化

  /* Definitions */
  message Info {
    string title = 1;
    map<string, string> values = 2;
  }

  enum Level {
    LEVEL_UNKNOWN = 0;
    NO_LEVEL = 1;
    LEVEL_1 = 2;
    LEVEL_2 = 3;
    LEVEL_3 = 4;
    LEVEL_4 = 5;
    LEVEL_5 = 6;
  }

  enum LabelGroupName {
    LABEL_GROUP_NAME_UNKNOWN = 0;
    VariationReason = 1;   // 変動理由
    ImprovementMethod = 2; // 改善方法
    BonusFactor = 3;       // 加点要因
    DeductionFactor = 4;   // 減点要因
  }

  enum LabelGroupIcon {
    LABEL_GROUP_ICON_UNKNOWN = 0;
    GOOD = 1; // 良い
    BAD = 2;  // 悪い
  }

  message LabelGroup {
    LabelGroupName name = 1 [ deprecated = true ]; // title を使用してください
    string title = 3;
    LabelGroupIcon icon = 4;
    repeated Label labels = 2;
  }

  message Label {
    string name = 1;
    string url = 2;
  }

  enum BehaviorOnTap {
    BEHAVIOR_ON_TAP_NONE = 0;
    OPEN_SUBSCORE = 1;
    OPEN_RELATED_LOG = 2;
  }

  // シンプルスコアカード
  message SimpleScorecard {
    // true: ポジティブスコアカード
    // false: ネガティブスコアカード
    bool positive = 1;
    taomics.praman.Range range = 2;
    taomics.praman.Range level1_range = 3;
    taomics.praman.Range level2_range = 4;
    taomics.praman.Range level3_range = 5;
    taomics.praman.Range level4_range = 6;
    taomics.praman.Range level5_range = 7;

    string leftside_label = 8;
    string rightside_label = 9;

    int32 interval = 10;
  }

  // バランススコアカードはレベルを扱わず以下で表現します。
  //
  // - ニュートラル
  // - レフトサイド
  // - ライトサイド
  // - レッドゾーン
  //
  // レッドゾーンはレベル５相当です。
  message BalanceScorecard {
    taomics.praman.Range range = 1;
    taomics.praman.Range neutral_range = 2;
    taomics.praman.Range leftside_range = 3;
    taomics.praman.Range rightside_range = 4;
    taomics.praman.Range leftredzone_range = 5;
    taomics.praman.Range rightredzone_range = 6;

    string newtral_label = 7;
    string leftside_label = 8;
    string rightside_label = 9;
  }

  // ディファレンシャルスコアカードは比較可能な2つのパラメータとその差分を表します。
  message DifferentialScorecard {
    message Parameter {
      string name = 1;
      float value = 2;
    }

    Parameter parameter1 = 1;
    Parameter parameter2 = 2;
    Parameter diff = 3;
    taomics.praman.Unit unit = 4;
  }

  // 食事バランススコアカードは食事バランスを表現する専用のスコアカードです。
  message MealBalanceScorecard {
    message MealValue {
      float value = 1;
      taomics.praman.Range range = 2;
      taomics.praman.Range optimal_range = 3;
    }

    MealValue starch = 1; // 主食
    MealValue main = 2;   // 主菜
    MealValue side = 3;   // 副菜
    MealValue dairy = 4;  // 乳製品
    MealValue fruit = 5;  // 果物
  }
}

message LifestyleJournalEvaluateChallengeScoresRequest {}

message LifestyleJournalEvaluateChallengeScoresResponse {
  repeated ChallengeScore challenge_scores = 1;
}

// LifestyleJournalService
//
// Common Errors:
//   - INTERNAL (13): Server is something wrong.
//   - UNAUTHENTICATED (16): Authorization header is something wrong.
service LifestyleJournalService {
  // Keep a journal.
  //
  // Errors:
  //   - INVALID_ARGUMENT (3): There is an invalid argument
  rpc KeepJournal(LifestyleJournalKeepingRequest)
      returns (LifestyleJournalKeepingResponse);

  // Evaluate the challenge scores based on the latest journal records.
  // It requires a minimum number of journal records to perform an evaluation.
  //
  // Errors:
  //   - FAILED_PRECONDITION (9): Not enough journal records to evaluate the
  //   challenge scores.
  rpc EvaluateChallengeScores(LifestyleJournalEvaluateChallengeScoresRequest)
      returns (LifestyleJournalEvaluateChallengeScoresResponse);
}
